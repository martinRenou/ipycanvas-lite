(self.webpackChunk_JUPYTERLAB_CORE_OUTPUT=self.webpackChunk_JUPYTERLAB_CORE_OUTPUT||[]).push([[1753],{65246:(e,t,n)=>{"use strict";n.d(t,{I:()=>a});var s=n(86703),r=n(58137);class a{constructor(e){this._history=[],this._executionCount=0,this._isDisposed=!1,this._disposed=new r.Signal(this),this._parentHeader=void 0;const{id:t,name:n,sendMessage:s}=e;this._id=t,this._name=n,this._sendMessage=s}get ready(){return Promise.resolve()}get isDisposed(){return this._isDisposed}get disposed(){return this._disposed}get id(){return this._id}get name(){return this._name}get executionCount(){return this._executionCount}get parentHeader(){return this._parentHeader}dispose(){this.isDisposed||(this._isDisposed=!0,this._disposed.emit(void 0))}async handleMessage(e){switch(this._busy(e),e.header.msg_type){case"kernel_info_request":await this._kernelInfo(e);break;case"execute_request":await this._executeRequest(e);break;case"complete_request":await this._complete(e);break;case"history_request":await this._historyRequest(e);break;case"comm_open":await this.commOpen(e);break;case"comm_msg":await this.commMsg(e);break;case"comm_close":await this.commClose(e)}this._idle(e)}stream(e){var t,n;const r=s.KernelMessage.createMessage({channel:"iopub",msgType:"stream",session:null!==(n=null===(t=this._parentHeader)||void 0===t?void 0:t.session)&&void 0!==n?n:"",parentHeader:this._parentHeader,content:e});this._sendMessage(r)}displayData(e){var t,n;const r=s.KernelMessage.createMessage({channel:"iopub",msgType:"display_data",session:null!==(n=null===(t=this._parentHeader)||void 0===t?void 0:t.session)&&void 0!==n?n:"",parentHeader:this._parentHeader,content:e});this._sendMessage(r)}handleComm(e,t,n,r){var a,o;const i=s.KernelMessage.createMessage({channel:"iopub",msgType:e,session:null!==(o=null===(a=this._parentHeader)||void 0===a?void 0:a.session)&&void 0!==o?o:"",parentHeader:this._parentHeader,content:t,metadata:n,buffers:r});this._sendMessage(i)}_idle(e){const t=s.KernelMessage.createMessage({msgType:"status",session:e.header.session,parentHeader:e.header,channel:"iopub",content:{execution_state:"idle"}});this._sendMessage(t)}_busy(e){const t=s.KernelMessage.createMessage({msgType:"status",session:e.header.session,parentHeader:e.header,channel:"iopub",content:{execution_state:"busy"}});this._sendMessage(t)}async _kernelInfo(e){const t=await this.kernelInfoRequest(),n=s.KernelMessage.createMessage({msgType:"kernel_info_reply",channel:"shell",session:e.header.session,parentHeader:e.header,content:t});this._sendMessage(n)}async _executeRequest(e){const t=e.content;this._executionCount++,this._parentHeader=e.header,this._executeInput(e);try{const n=await this.executeRequest(t);t.code.startsWith("%")||this._history.push([0,0,t.code]),Object.keys(n.data).length>0&&this._executeResult(e,n),this._executeReply(e,{execution_count:this._executionCount,status:"ok",user_expressions:{},payload:[]})}catch(t){const{name:n,stack:s,message:r}=t,a={ename:n,evalue:r,traceback:[s]};this._error(e,a),this._executeReply(e,{execution_count:this._executionCount,status:"error",...a})}}async _historyRequest(e){const t=e,n=s.KernelMessage.createMessage({msgType:"history_reply",channel:"shell",parentHeader:t.header,session:e.header.session,content:{status:"ok",history:this._history}});this._sendMessage(n)}_executeInput(e){const t=e,n=t.content.code,r=s.KernelMessage.createMessage({msgType:"execute_input",parentHeader:t.header,channel:"iopub",session:e.header.session,content:{code:n,execution_count:this._executionCount}});this._sendMessage(r)}_executeResult(e,t){const n=s.KernelMessage.createMessage({msgType:"execute_result",parentHeader:e.header,channel:"iopub",session:e.header.session,content:{...t,execution_count:this._executionCount}});this._sendMessage(n)}_executeReply(e,t){const n=e,r=s.KernelMessage.createMessage({msgType:"execute_reply",channel:"shell",parentHeader:n.header,session:e.header.session,content:t});this._sendMessage(r)}_error(e,t){const n=s.KernelMessage.createMessage({msgType:"error",parentHeader:e.header,channel:"iopub",session:e.header.session,content:t});this._sendMessage(n)}async _complete(e){const t=e,n=await this.completeRequest(t.content),r=s.KernelMessage.createMessage({msgType:"complete_reply",parentHeader:t.header,channel:"shell",session:e.header.session,content:n});this._sendMessage(r)}}},64831:(e,t,n)=>{"use strict";n.d(t,{L:()=>r,q:()=>a});var s=n(66065);const r=new s.Token("@jupyterlite/kernel:IKernels"),a=new s.Token("@jupyterlite/kernelspec:IKernelSpecs")},51753:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var s=n(87939),r=n(64831),a=n(65246),o=n(66065),i=n(5150),c=n(44285),l=n(76943),p=n(61544),d=n(41658);class m extends a.I{constructor(e){var t;super(e),this._executeDelegate=new o.PromiseDelegate,this._ready=new o.PromiseDelegate;const{pyodideUrl:n}=e,r=l,a=s.URLExt.join(window.location.origin,r),m=p,u=s.URLExt.join(window.location.origin,m),h=d,y=s.URLExt.join(window.location.origin,h),g=null!==(t=e.pyoliteWheel)&&void 0!==t?t:c,_=s.URLExt.join(window.location.origin,g),k=n.slice(0,n.lastIndexOf("/")+1),b=new Blob([[`importScripts("${n}");`,`var indexURL = "${k}";`,`var _widgetsnbextensionWheelUrl = '${a}';`,`var _nbformatWheelUrl = '${u}';`,`var _ipykernelWheelUrl = '${y}';`,`var _pyoliteWheelUrl = '${_}';`,i].join("\n")]);this._worker=new Worker(window.URL.createObjectURL(b)),this._worker.onmessage=e=>{this._processWorkerMessage(e.data)},this._ready.resolve()}dispose(){this.isDisposed||(console.log(`Dispose worker for kernel ${this.id}`),this._worker.terminate(),super.dispose())}get ready(){return this._ready.promise}_processWorkerMessage(e){var t,n;const s=this.parentHeader;switch(e.type){case"stdout":{const t={event:"stream",name:"stdout",parentHeader:s,text:e.stdout};this.stream(t);break}case"stderr":{const{message:t}=e.stderr,n={event:"stream",name:"stderr",parentHeader:s,text:null!=t?t:e.stderr};this.stream(n);break}case"results":{const n=null!==(t=e.results)&&void 0!==t?t:{data:{},metadata:{}};this._executeDelegate.resolve(n);break}case"error":{const{name:t,stack:n,message:r}=e.error,a={name:t,stack:n,message:r};this._executeDelegate.resolve({...a,parentHeader:s});break}case"display":{const t=null!==(n=e.bundle)&&void 0!==n?n:{data:{},metadata:{}};this.displayData(t);break}case"comm_msg":case"comm_open":case"comm_close":this.handleComm(e.type,e.content,e.metadata,e.buffers);break;default:this._executeDelegate.resolve({data:{},metadata:{}})}}async kernelInfoRequest(){return{implementation:"pyodide",implementation_version:"0.1.0",language_info:{codemirror_mode:{name:"python",version:3},file_extension:".py",mimetype:"text/x-python",name:"python",nbconvert_exporter:"python",pygments_lexer:"ipython3",version:"3.8"},protocol_version:"5.3",status:"ok",banner:"Pyolite: A WebAssembly-powered Python kernel backed by Pyodide",help_links:[{text:"Python (WASM) Kernel",url:"https://pyodide.org"}]}}async executeRequest(e){const t=await this._sendWorkerMessage("execute-request",e);if(t.name)throw t;return{execution_count:this.executionCount,...t}}async completeRequest(e){return await this._sendWorkerMessage("complete-request",e)}async inspectRequest(e){throw new Error("Not implemented")}async isCompleteRequest(e){throw new Error("Not implemented")}async commInfoRequest(e){return await this._sendWorkerMessage("comm-info-request",e)}async inputRequest(e){throw new Error("Not implemented")}async commOpen(e){return await this._sendWorkerMessage("comm-open",e)}async commMsg(e){return await this._sendWorkerMessage("comm-msg",e)}async commClose(e){return await this._sendWorkerMessage("comm-close",e)}async _sendWorkerMessage(e,t){return this._executeDelegate=new o.PromiseDelegate,this._worker.postMessage({type:e,data:t}),await this._executeDelegate.promise}}const u=[{id:"@jupyterlite/pyolite-kernel-extension:kernel",autoStart:!0,requires:[r.q],activate:(e,t)=>{const n=s.PageConfig.getOption("pyodideUrl")||"https://cdn.jsdelivr.net/pyodide/v0.17.0/full/pyodide.js",r=s.URLExt.isLocal(n)?s.URLExt.join(window.location.origin,n):n;t.register({spec:{name:"python",display_name:"Pyolite",language:"python",argv:[],spec:{argv:[],env:{},display_name:"Pyolite",language:"python",interrupt_mode:"message",metadata:{}},resources:{"logo-32x32":"TODO","logo-64x64":"/kernelspecs/python.png"}},create:async e=>new m({...e,pyodideUrl:r})})}}]},5150:e=>{"use strict";e.exports="\"use strict\";\n/**\n * Store the kernel and interpreter instances.\n */\n// eslint-disable-next-line\n// @ts-ignore: breaks typedoc\nlet kernel;\n// eslint-disable-next-line\n// @ts-ignore: breaks typedoc\nlet interpreter;\n/**\n * Load Pyodided and initialize the interpreter.\n */\nasync function loadPyodideAndPackages() {\n    // new in 0.17.0 indexURL must be provided\n    await loadPyodide({ indexURL });\n    await pyodide.loadPackage(['matplotlib']);\n    await pyodide.runPythonAsync(`\n    import micropip\n    await micropip.install([\n      'traitlets',\n      '${_widgetsnbextensionWheelUrl}',\n      '${_nbformatWheelUrl}',\n      '${_ipykernelWheelUrl}'\n    ])\n    await micropip.install([\n      '${_pyoliteWheelUrl}'\n    ]);\n    import pyolite\n  `);\n    kernel = pyodide.globals.get('pyolite').kernel_instance;\n    interpreter = kernel.interpreter;\n    interpreter.send_comm = sendComm;\n    const version = pyodide.globals.get('pyolite').__version__;\n    console.log('Pyolite kernel initialized, version', version);\n}\n/**\n * Recursively convert a Map to a JavaScript object\n * @param The Map object to convert\n */\nfunction mapToObject(obj) {\n    const out = obj instanceof Array ? [] : {};\n    obj.forEach((value, key) => {\n        out[key] =\n            value instanceof Map || value instanceof Array ? mapToObject(value) : value;\n    });\n    return out;\n}\n/**\n * Format the response from the Pyodide evaluation.\n *\n * @param res The result object from the Pyodide evaluation\n */\nfunction formatResult(res) {\n    if (!pyodide.isPyProxy(res)) {\n        return res;\n    }\n    // TODO: this is a bit brittle\n    const m = res.toJs();\n    const results = mapToObject(m);\n    return results;\n}\n// eslint-disable-next-line\n// @ts-ignore: breaks typedoc\nconst pyodideReadyPromise = loadPyodideAndPackages();\n/**\n * Send a comm message to the front-end.\n *\n * @param type The type of the comm message.\n * @param content The content.\n * @param metadata The metadata.\n * @param ident The ident.\n * @param buffers The binary buffers.\n */\nasync function sendComm(type, content, metadata, ident, buffers) {\n    postMessage({\n        type: type,\n        content: formatResult(content),\n        metadata: formatResult(metadata),\n        ident: formatResult(ident),\n        buffers: formatResult(buffers)\n    });\n}\n/**\n * Execute code with the interpreter.\n *\n * @param content The incoming message with the code to execute.\n */\nasync function execute(content) {\n    const stdoutCallback = (stdout) => {\n        postMessage({\n            parentHeader: content.parentHeader,\n            stdout,\n            type: 'stdout'\n        });\n    };\n    const stderrCallback = (stderr) => {\n        postMessage({\n            parentHeader: content.parentHeader,\n            stderr,\n            type: 'stderr'\n        });\n    };\n    // TODO: support multiple\n    const displayCallback = (res) => {\n        const bundle = formatResult(res);\n        postMessage({\n            parentHeader: content.parentHeader,\n            bundle,\n            type: 'display'\n        });\n    };\n    interpreter.stdout_callback = stdoutCallback;\n    interpreter.stderr_callback = stderrCallback;\n    kernel.display_publisher.display_callback = displayCallback;\n    let res;\n    try {\n        res = await interpreter.run(content.code);\n    }\n    catch (error) {\n        postMessage({\n            parentheader: content.parentheader,\n            type: 'error',\n            error\n        });\n        return;\n    }\n    const reply = {\n        parentheader: content.parentheader,\n        type: 'results'\n    };\n    if (!res) {\n        postMessage(reply);\n        return;\n    }\n    try {\n        const results = formatResult(res);\n        postMessage({\n            ...reply,\n            results\n        });\n    }\n    catch (e) {\n        postMessage(reply);\n    }\n}\n/**\n * Complete the code submitted by a user.\n *\n * @param content The incoming message with the code to complete.\n */\nfunction complete(content) {\n    const res = interpreter.complete(content.code.substring(0, content.cursor_pos));\n    const results = formatResult(res);\n    const reply = {\n        parentheader: content.parentheader,\n        type: 'results',\n        results: {\n            matches: results[0],\n            cursor_start: results[1],\n            cursor_end: content.cursor_pos,\n            status: 'ok'\n        }\n    };\n    postMessage(reply);\n}\n/**\n * Respond to the commInfoRequest.\n *\n * @param content The incoming message with the comm target name.\n */\nfunction commInfo(content) {\n    const res = kernel.comm_info(content.target_name);\n    const results = formatResult(res);\n    const reply = {\n        parentheader: content.parentheader,\n        type: 'results',\n        results: {\n            comms: results,\n            status: 'ok'\n        }\n    };\n    postMessage(reply);\n}\n/**\n * Respond to the commOpen.\n *\n * @param content The incoming message with the comm open.\n */\nfunction commOpen(content) {\n    const res = kernel.comm_manager.comm_open(pyodide.toPy(content));\n    const results = formatResult(res);\n    const reply = {\n        parentheader: content.parentheader,\n        type: 'results',\n        results\n    };\n    postMessage(reply);\n}\n/**\n * Respond to the commMsg.\n *\n * @param content The incoming message with the comm msg.\n */\nfunction commMsg(content) {\n    const res = kernel.comm_manager.comm_msg(pyodide.toPy(content));\n    const results = formatResult(res);\n    const reply = {\n        parentheader: content.parentheader,\n        type: 'results',\n        results\n    };\n    postMessage(reply);\n}\n/**\n * Respond to the commClose.\n *\n * @param content The incoming message with the comm close.\n */\nfunction commClose(content) {\n    const res = kernel.comm_manager.comm_close(pyodide.toPy(content));\n    const results = formatResult(res);\n    const reply = {\n        parentheader: content.parentheader,\n        type: 'results',\n        results\n    };\n    postMessage(reply);\n}\n/**\n * Process a message sent to the worker.\n *\n * @param event The message event to process\n */\nself.onmessage = async (event) => {\n    await pyodideReadyPromise;\n    const data = event.data;\n    const messageType = data.type;\n    const messageContent = data.data;\n    switch (messageType) {\n        case 'execute-request':\n            console.log('Perform execution inside worker', data);\n            return execute(messageContent);\n        case 'complete-request':\n            return complete(messageContent);\n        case 'comm-info-request':\n            return commInfo(messageContent);\n        case 'comm-open':\n            return commOpen(messageContent);\n        case 'comm-msg':\n            return commMsg(messageContent);\n        case 'comm-close':\n            return commClose(messageContent);\n        default:\n            break;\n    }\n};\n"},41658:(e,t,n)=>{"use strict";e.exports=n.p+"ipykernel-5.5.5-py3-none-any.whl"},61544:(e,t,n)=>{"use strict";e.exports=n.p+"nbformat-4.2.0-py3-none-any.whl"},44285:(e,t,n)=>{"use strict";e.exports=n.p+"pyolite-0.1.0a1-py3-none-any.whl"},76943:(e,t,n)=>{"use strict";e.exports=n.p+"widgetsnbextension-3.5.0-py3-none-any.whl"}}]);
//# sourceMappingURL=1753.cc3ed08ff9014f5264b7.js.map